#!/usr/bin/env python

from argparse import ArgumentParser

from Biblib.Bibliography import Bibliography

from filelock import FileLock


lock = FileLock("/tmp/bib.lock")


def main():
    parser = ArgumentParser(
        description="Bibliography Manager."
        " Download and manage books and articles.",
        add_help=True,
    )

    parser.add_argument(
        "ACTION",
        nargs="?",
        default="show",
        choices=("add", "show", "scan", "fetch", "convert"),
        help="action to take (defaults to show)",
    )
    parser.add_argument(
        "DOCTYPE",
        nargs="?",
        choices=("doi", "isbn", "arxiv"),
        help="type of documents to add.",
    )
    parser.add_argument("REFERENCES", nargs="*", help="document IDs")

    parser.add_argument(
        "-r",
        "--replace",
        action="store_true",
        help="Replace document if already present.",
    )
    parser.add_argument(
        "-o",
        "--open",
        action="store_true",
        help="Open document(s) after adding.",
    )
    parser.add_argument(
        "-c",
        "--copy",
        action="store_true",
        help="Copy document(s) to downloads after adding.",
    )
    parser.add_argument(
        "-k",
        "--show-hidden",
        action="store_true",
        help="Show hidden documents.",
    )
    parser.add_argument(
        "-F",
        "--force-ocr",
        action="store_true",
        help="Force OCR of documents.",
    )
    parser.add_argument(
        "-t",
        "--tags",
        default="",
        help="String of comma-separated tags to add to documents.",
    )
    parser.add_argument(
        "-f",
        "--file",
        default=None,
        help="Add article from file instead of downloading it.",
    )
    parser.add_argument(
        "-b",
        "--alternate-bib",
        default=None,
        help="Alternative document id to use for bib entry.",
    )

    with lock:
        args = parser.parse_args()
        bib = Bibliography(args)

        if "add" in args.ACTION:
            refs = set()
            for ref in args.REFERENCES:
                refs.add(bib.add(args.DOCTYPE, ref))
            if args.open:
                bib.open(refs)
            if args.copy:
                bib.copy(refs)
        else:
            getattr(bib, args.ACTION)()
        bib.update()

    return


main()
